#!/usr/bin/python3 -u

import datetime
import logging
import logging.handlers
import os
import os.path
import pathlib
import signal
import sys
import time
import uuid

import dns.exception
import dns.resolver
import dns.reversename
import netaddr

__author__ = "Gena Makhomed"
__contact__ = "https://github.com/makhomed/autofilter"
__license__ = "GNU General Public License version 3"
__version__ = "2.0.0"

DEFAULT_REMOTE_ADDR_REQUEST_COUNT_THRESHOLD = 128
DEFAULT_REMOTE_ADDR_ONE_URI_COUNT_THRESHOLD = 32
DEFAULT_REMOTE_ADDR_BLOCK_PERIOD_IN_SECONDS = 24 * 60 * 60

AUTOFILTER_CONFIG_FILENAME = '/opt/autofilter/autofilter.conf'
AUTOFILTER_LOG_FILENAME = '/opt/autofilter/var/autofilter.log'
AUTOFILTER_BOT_CONF_FILENAME = '/opt/autofilter/var/bot.conf'

NGINX_MASTER_PID_FILENAME = '/var/run/nginx.pid'
NGINX_ACCESS_LOG_FILENAME = '/var/log/nginx/access.log'
NGINX_SERVICE_RELOAD_INTERVAL = 60


class Config:
    def __init__(self):
        self.limit_request_count = {}
        self.limit_one_uri_count = {}
        self.block = {}
        self.valid = False

    @staticmethod
    def get_config():
        config = Config.read_config_file()
        if config.valid:
            return config
        else:
            return Config.get_default_config()

    @staticmethod
    def get_default_config():
        config = Config()
        config.limit_request_count['ALL'] = DEFAULT_REMOTE_ADDR_REQUEST_COUNT_THRESHOLD
        config.limit_one_uri_count['ALL'] = DEFAULT_REMOTE_ADDR_ONE_URI_COUNT_THRESHOLD
        config.block['ALL'] = DEFAULT_REMOTE_ADDR_BLOCK_PERIOD_IN_SECONDS
        config.valid = True
        return config

    @staticmethod
    def read_config_file():
        if not os.path.isfile(AUTOFILTER_CONFIG_FILENAME):
            return Config.get_default_config()
        config = Config()
        logger = logging.getLogger('config')
        with open(AUTOFILTER_CONFIG_FILENAME) as config_file:
            lines = config_file.read().split('\n')
        for line in lines:
            comment_start = line.find('#')
            if comment_start > -1:
                line = line[:comment_start]
            line = line.strip()
            if not line:
                continue
            line = line.replace('\t', '\x20')
            line = line.lower()
            name, value = line.split(None, 1)

            if name == 'limit':
                entity, limit_request_count, limit_one_uri_count = value.split(None, 2)
                if ':' not in entity:
                    entity = entity.upper()
                if entity in config.limit_request_count:
                    logger.error(f"invalid config: limit for entity '{entity}' already defined")
                    return config
                if limit_request_count == 'none':
                    limit_request_count = 2**64 - 1
                else:
                    try:
                        limit_request_count = int(limit_request_count)
                    except ValueError as error:
                        logger.error(f"invalid config: invalid limit value '{limit_request_count}' for entity '{entity}': {error}")
                        return config
                if limit_request_count < 1:
                    logger.error(f"invalid config: invalid limit value '{limit_request_count}' for entity '{entity}'")
                    return config
                config.limit_request_count[entity] = limit_request_count
                if limit_one_uri_count == 'none':
                    limit_one_uri_count = 2**64 - 1
                else:
                    try:
                        limit_one_uri_count = int(limit_one_uri_count)
                    except ValueError as error:
                        logger.error(f"invalid config: invalid limit value '{limit_one_uri_count}' for entity '{entity}': {error}")
                        return config
                if limit_one_uri_count < 1:
                    logger.error(f"invalid config: invalid limit value '{limit_one_uri_count}' for entity '{entity}'")
                    return config
                config.limit_one_uri_count[entity] = limit_one_uri_count
                if limit_one_uri_count > limit_request_count:
                    logger.error(f"invalid config: invalid limit_one_uri_count value ('{limit_one_uri_count}') > limit_request_count ('{limit_request_count}') for entity '{entity}'")
                    return config

            elif name == 'block':
                try:
                    entity, block = value.split(None, 1)
                except ValueError as error:
                    logger.error(f"invalid config: bad block directive: '{line}': {error}")
                    return config
                if ':' not in entity:
                    entity = entity.upper()
                if entity in config.block:
                    logger.error(f"invalid config: block for entity '{entity}' already defined")
                    return config
                valid, block = Config.parse_time(block)
                if valid:
                    config.block[entity] = block
                else:
                    return config
            else:
                logger.error(f"invalid config directive '{name}'")
                return config

        if 'ALL' not in config.limit_request_count:
            config.limit_request_count['ALL'] = DEFAULT_REMOTE_ADDR_REQUEST_COUNT_THRESHOLD
            config.limit_one_uri_count['ALL'] = DEFAULT_REMOTE_ADDR_ONE_URI_COUNT_THRESHOLD
        if 'ALL' not in config.block:
            config.block['ALL'] = DEFAULT_REMOTE_ADDR_BLOCK_PERIOD_IN_SECONDS

        for cidr in config.limit_request_count:
            if '/' in cidr:
                try:
                    netaddr.IPNetwork(cidr)
                except Exception as ex:
                    logger.error(f"invalid config: invalid CIDR in limit: '{cidr}': {ex}")
                    return config

        for cidr in config.block:
            if '/' in cidr:
                try:
                    netaddr.IPNetwork(cidr)
                except Exception as ex:
                    logger.error(f"invalid config: invalid CIDR in block: '{cidr}': {ex}")
                    return config

        config.valid = True
        return config

    @staticmethod
    def parse_time(block):
        logger = logging.getLogger('config')
        if not block.endswith('h') and not block.endswith('d'):
            logger.error(f"invalid config: invalid time '{block}'")
            return False, 0
        try:
            num = int(block[:-1])
        except ValueError as error:
            logger.error(f"invalid config: invalid time '{block}': {error}")
            return False, 0
        if num < 1:
            logger.error(f"invalid config: invalid time '{block}'")
            return False, 0
        if block.endswith('h'):
            return True, num * 60 * 60
        else:
            return True, num * 24 * 60 * 60


class Resolver:
    def __init__(self):
        self.resolver = dns.resolver.Resolver(configure=False)
        self.resolver.nameservers = ['127.0.0.1']

    def ip_to_domain(self, ip):
        try:
            reverse_addr = dns.reversename.from_address(ip)
            answer = self.resolver.query(reverse_addr, "PTR")
            name = str(answer[0])
            if ':' in ip:
                query_type = "AAAA"
            else:
                query_type = "A"
            answer = self.resolver.query(name, query_type)
            name_ip = str(answer[0])
            if name_ip == ip:
                return name
            else:
                return None
        except dns.exception.Timeout:
            return None
        except dns.resolver.NXDOMAIN:
            return None
        except dns.resolver.YXDOMAIN:
            return None
        except dns.resolver.NoAnswer:
            return None
        except dns.resolver.NoNameservers:
            return None


class AutoFilter:
    def __init__(self):
        self.config = Config.get_config()
        self.resolver = Resolver()
        self.log_filename = NGINX_ACCESS_LOG_FILENAME
        self.log_file_inode = None
        self.log_file = None
        self.prefix = None
        self.exit = False
        self.set_signal_handler()
        self.botnet = set()
        pathlib.Path(AUTOFILTER_BOT_CONF_FILENAME).touch()
        self.request_count_by_remote_addr = dict()
        self.request_count_by_remote_addr_by_request_uri = dict()
        self.country = dict()
        self.last_nginx_reload = 0

    def check_exit(self):
        if self.exit:
            sys.exit(0)

    def exit_gracefully(self, dummy_signum, dummy_frame):
        self.exit = True

    def set_signal_handler(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def wait_log_file(self):
        while not os.path.isfile(self.log_filename):
            time.sleep(1)

    def reopen_log(self):
        if self.log_file is None:  # open log
            self.wait_log_file()
            stat = os.stat(self.log_filename)
            self.log_file = open(self.log_filename)
            self.log_file_inode = stat.st_ino
        else:  # reopen log
            self.wait_log_file()
            stat = os.stat(self.log_filename)
            if self.log_file_inode != stat.st_ino:  # log file rotated
                if self.log_file:
                    self.log_file.close()
                self.log_file = open(self.log_filename)
                self.log_file_inode = stat.st_ino

    def skip_old_log_file_records(self):
        while not self.exit:
            self.reopen_log()
            line = self.log_file.readline()
            self.check_exit()
            if line:
                prefix = line[:16]
                if self.prefix != prefix:
                    self.prefix = prefix
                    now = datetime.datetime.now()
                    event = datetime.datetime.strptime(prefix.replace('T', ' '), "%Y-%m-%d %H:%M")
                    delta = datetime.timedelta(minutes=2)
                    if now - event > delta or event - now > delta:
                        continue
                    else:
                        return
            else:
                return

    def run(self):
        # self.skip_old_log_file_records()
        while not self.exit:
            self.reopen_log()
            line = self.log_file.readline()
            self.check_exit()
            if line:
                prefix = line[:16]
                if self.prefix != prefix:
                    if self.prefix:
                        self.process_batch(self.prefix.replace('T', ' '))
                    self.prefix = prefix
                self.process_line(line)
            else:
                time.sleep(1)

    def process_line(self, line):
        time, geoip_country_code, remote_addr, upstream_cache_status, upstream_response_time, status, scheme, \
            host, request_method, request_uri, body_bytes_sent, http_referer, http_user_agent = line.strip().split('\t')
        static = upstream_cache_status == '-' and upstream_response_time == '-'
        request_weight = 1.0 if not static else 0.1
        request_uri = host + request_uri

        self.country[remote_addr] = geoip_country_code

        if remote_addr not in self.request_count_by_remote_addr:
            self.request_count_by_remote_addr[remote_addr] = 0.0
        self.request_count_by_remote_addr[remote_addr] += request_weight

        if remote_addr not in self.request_count_by_remote_addr_by_request_uri:
            self.request_count_by_remote_addr_by_request_uri[remote_addr] = dict()
        if request_uri not in self.request_count_by_remote_addr_by_request_uri[remote_addr]:
            self.request_count_by_remote_addr_by_request_uri[remote_addr][request_uri] = 0.0
        self.request_count_by_remote_addr_by_request_uri[remote_addr][request_uri] += request_weight

    def process_batch(self, prefix):
        bot = self.read_bot_conf()
        bot = self.delete_expired_records(bot)

        for remote_addr in self.request_count_by_remote_addr_by_request_uri:
            if len(self.request_count_by_remote_addr_by_request_uri[remote_addr]) == 1:
                for request_uri in self.request_count_by_remote_addr_by_request_uri[remote_addr]:
                    request_count = int(self.request_count_by_remote_addr_by_request_uri[remote_addr][request_uri])
                    country = self.country[remote_addr]
                    if remote_addr not in bot and self.is_ip_blocked_by_one_uri_count(remote_addr, country, request_count):
                        block_until = self.ip_block_until(remote_addr, country)
                        bot[remote_addr] = block_until, country, request_count, f"ONE_URI_COUNT {request_uri}"
                        logging.info(f"{prefix} bot detected: {country} {remote_addr:15s} {request_count:7} ONE_URI_COUNT {request_uri}")

        for remote_addr in self.request_count_by_remote_addr:
            request_count = int(self.request_count_by_remote_addr[remote_addr])
            country = self.country[remote_addr]
            if remote_addr not in bot:
                blocked, domain = self.is_ip_blocked_by_request_count(remote_addr, country, request_count)
                if blocked:
                    block_until = self.ip_block_until(remote_addr, country)
                    bot[remote_addr] = block_until, country, request_count, f"REQUEST_COUNT from {domain}"
                    logging.info(f"{prefix} bot detected: {country} {remote_addr:15s} {request_count:7d} REQUEST_COUNT from {domain}")

        self.write_bot_conf(bot)
        self.reload_nginx_if_needed(bot)

        self.request_count_by_remote_addr.clear()
        self.request_count_by_remote_addr_by_request_uri.clear()
        self.country.clear()

    def is_whitelisted_search_engine(self, domain):
        # https://support.google.com/webmasters/answer/80553?hl=en
        if domain.endswith(".googlebot.com.") or domain.endswith(".google.com."):
            return True
        # https://yandex.com/support/webmaster/robot-workings/check-yandex-robots.xml
        elif domain.endswith(".yandex.com.") or domain.endswith(".yandex.net.") or domain.endswith(".yandex.ru."):
            return True
        # https://www.bing.com/webmaster/help/how-to-verify-bingbot-3905dc26
        elif domain.endswith(".search.msn.com."):
            return True
        # The Facebook Crawler ? https://developers.facebook.com/docs/sharing/webmasters/crawler
        elif domain.endswith(".fbsv.net."):
            return True
        else:
            return False

    def get_ip_limit_request_count_by_cidr(self, ip):
        for cidr in self.config.limit_request_count:
            if '/' in cidr:
                if netaddr.IPAddress(ip) in netaddr.IPNetwork(cidr):
                    return self.config.limit_request_count.get(cidr)
        return None

    def get_ip_limit_one_uri_count_by_cidr(self, ip):
        for cidr in self.config.limit_one_uri_count:
            if '/' in cidr:
                if netaddr.IPAddress(ip) in netaddr.IPNetwork(cidr):
                    return self.config.limit_one_uri_count.get(cidr)
        return None

    def get_block_by_cidr(self, ip):
        for cidr in self.config.block:
            if '/' in cidr:
                if netaddr.IPAddress(ip) in netaddr.IPNetwork(cidr):
                    return self.config.block.get(cidr)
        return None

    def is_ip_blocked_by_request_count(self, ip, country, request_count):
        limit = self.config.limit_request_count.get(ip)
        if limit is None:
            limit = self.get_ip_limit_request_count_by_cidr(ip)
        if limit is None:
            limit = self.config.limit_request_count.get(country)
        if limit is None:
            limit = self.config.limit_request_count['ALL']
        if request_count > limit:
            domain = self.resolver.ip_to_domain(ip)
            if domain:
                if self.is_whitelisted_search_engine(domain):
                    return False, None
                else:
                    return True, domain
            else:
                return True, 'UNKNOWN REVERSE DOMAIN NAME'
        else:
            return False, None

    def is_ip_blocked_by_one_uri_count(self, ip, country, one_uri_count):
        limit = self.config.limit_one_uri_count.get(ip)
        if limit is None:
            limit = self.get_ip_limit_one_uri_count_by_cidr(ip)
        if limit is None:
            limit = self.config.limit_one_uri_count.get(country)
        if limit is None:
            limit = self.config.limit_one_uri_count['ALL']
        if one_uri_count > limit:
            # search engines do not request one uri many times,
            # so we skip test for search engines in this case.
            return True
        else:
            return False

    def ip_block_until(self, ip, country):
        block = self.config.block.get(ip)
        if block is None:
            block = self.get_block_by_cidr(ip)
        if block is None:
            block = self.config.block.get(country)
        if block is None:
            block = self.config.block['ALL']
        now = time.time()
        return now + block

    def write_file(self, filename, content):
        tmp_filename = filename + '.tmp.' + uuid.uuid4().hex + '.tmp'
        with open(tmp_filename, "w") as tmp_file:
            tmp_file.write(content)
        os.rename(tmp_filename, filename)

    def write_bot_conf(self, bot):
        bot_list = list()
        for ip in bot.keys():
            block_until, country, load, text = bot[ip]
            record = load, ip, country, block_until, text
            bot_list.append(record)
        bot_list.sort(reverse=True)
        out = list()
        for load, ip, country, block_until, text in bot_list:
            block_until = datetime.datetime.fromtimestamp(block_until)
            block_until = datetime.datetime(block_until.year, block_until.month, block_until.day, block_until.hour, block_until.minute, block_until.second)
            block_until = block_until.isoformat()
            line = "%45s 1; #    %s    %7d    %s    %s" % (ip, country, load, block_until, text)
            out.append(line)
        content = "\n".join(out)
        self.write_file(AUTOFILTER_BOT_CONF_FILENAME, content)

    def read_bot_conf(self):
        bot = dict()
        if os.path.isfile(AUTOFILTER_BOT_CONF_FILENAME):
            with open(AUTOFILTER_BOT_CONF_FILENAME) as bot_conf_file:
                for line in bot_conf_file:
                    line = line.strip()
                    if not line:
                        continue
                    ip, dummy_one, dummy_comment, country, load, block_until, text = line.split(None, 6)
                    load = int(load)
                    block_until = datetime.datetime.strptime(block_until, "%Y-%m-%dT%H:%M:%S")
                    block_until = int(time.mktime(block_until.timetuple()))
                    bot[ip] = block_until, country, load, text
        return bot

    def delete_expired_records(self, bot):
        now = time.time()
        for ip in bot.keys():
            block_until, dummy_country, dummy_load, dummy_text = bot[ip]
            if block_until < now:
                del bot[ip]
        return bot

    def send_nginx_signal(self, sig):
        if os.path.isfile(NGINX_MASTER_PID_FILENAME):
            with open(NGINX_MASTER_PID_FILENAME) as pid_file:
                try:
                    pid = int(pid_file.readline())
                except Exception:
                    pid = 0
            if pid > 0:
                os.kill(pid, sig)

    def reload_nginx_if_needed(self, bot):
        now = time.time()
        botnet = set(bot)
        if now - self.last_nginx_reload >= NGINX_SERVICE_RELOAD_INTERVAL:
            if botnet != self.botnet:
                self.send_nginx_signal(signal.SIGHUP)
                self.last_nginx_reload = now
                self.botnet = botnet


def configure_logging():
    var_dir = os.path.dirname(AUTOFILTER_LOG_FILENAME)
    if not os.path.isdir(var_dir):
        os.mkdir(var_dir)
    logfile = AUTOFILTER_LOG_FILENAME
    root_logger = logging.getLogger("")
    root_logger.setLevel(logging.DEBUG)
    log_formatter = logging.Formatter('%(asctime)s %(levelname)-7s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    log_handler = logging.handlers.RotatingFileHandler(logfile, maxBytes=1*1024*1024, backupCount=9)
    log_handler.setFormatter(log_formatter)
    root_logger.addHandler(log_handler)

    logger = logging.getLogger('config')
    stream_handler = logging.StreamHandler()
    logger.addHandler(stream_handler)


def main():
    configure_logging()
    if not Config.read_config_file().valid:
        sys.exit(1)
    else:
        AutoFilter().run()


if __name__ == '__main__':
    main()
